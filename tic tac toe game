package codes;
import java.util.Scanner;

public class TicTacToe {
	private char[][] board;
	private char currentPlayer;

	public TicTacToe() {
		board = new char[3][3];
		currentPlayer = 'X';
		initializeBoard();
	}

	private void initializeBoard() {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				board[i][j] = '-';
			}
		}
	}

	private void printBoard() {
		System.out.println("-------------");
		for (int i = 0; i < 3; i++) {
			System.out.print("| ");
			for (int j = 0; j < 3; j++) {
				System.out.print(board[i][j] + " | ");
			}
			System.out.println();
			System.out.println("-------------");
		}
	}

	private boolean isBoardFull() {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (board[i][j] == '-') {
					return false;
				}
			}
		}
		return true;
	}

	private boolean hasWon(char player) {
		// Check rows
		for (int i = 0; i < 3; i++) {
			if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
				return true;
			}
		}

		// Check columns
		for (int i = 0; i < 3; i++) {
			if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
				return true;
			}
		}

		// Check diagonals
		if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
			return true;
		}

		if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
			return true;
		}

		return false;
	}

	private int evaluateBoard() {
		if (hasWon('X')) {
			return 1; // X wins
		} else if (hasWon('O')) {
			return -1; // O wins
		} else {
			return 0; // Draw
		}
	}

	private int minimax(int depth, boolean isMaximizingPlayer) {
		int score = evaluateBoard();

		if (score == 1 || score == -1) {
			return score;
		}

		if (isBoardFull()) {
			return 0;
		}

		if (isMaximizingPlayer) {
			int bestScore = Integer.MIN_VALUE;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++) {
					if (board[i][j] == '-') {
						board[i][j] = 'X';
						int currentScore = minimax(depth + 1, false);
						board[i][j] = '-';
						bestScore = Math.max(currentScore, bestScore);
					}
				}
			}
			return bestScore;
		} else {
			int bestScore = Integer.MAX_VALUE;
			for (int i = 0; i < 3; i++) {
				for (int j = 0; j < 3; j++) {
					if (board[i][j] == '-') {
						board[i][j] = 'O';
						int currentScore = minimax(depth + 1, true);
						board[i][j] = '-';
						bestScore = Math.min(currentScore, bestScore);
					}
				}
			}
			return bestScore;
		}
	}

	private void makeMove() {
		int bestScore = Integer.MIN_VALUE;
		int bestRow = -1;
		int bestCol = -1;

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if (board[i][j] == '-') {
					board[i][j] = 'X';
					int currentScore = minimax(0, false);
					board[i][j] = '-';

					if (currentScore > bestScore) {
						bestScore = currentScore;
						bestRow = i;
						bestCol = j;
					}
				}
			}
		}

		board[bestRow][bestCol] = 'X';
	}

	public void play() {
		Scanner scanner = new Scanner(System.in);

		System.out.println("Welcome to Tic-Tac-Toe!");
		System.out.println("You are playing as 'O'. Let's start!");

		while (true) {
			printBoard();

			if (currentPlayer == 'O') {
				System.out.print("Enter your move (row [1-3] column [1-3]): ");
				int row = scanner.nextInt() - 1;
				int col = scanner.nextInt() - 1;

				if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == '-') {
					board[row][col] = 'O';
					currentPlayer = 'X';
				} else {
					System.out.println("Invalid move. Try again!");
					continue;
				}
			} else {
				makeMove();
				currentPlayer = 'O';
			}

			if (hasWon('O')) {
				printBoard();
				System.out.println("Congratulations! You win!");
				break;
			}

			if (hasWon('X')) {
				printBoard();
				System.out.println("You lost! Better luck next time!");
				break;
			}

			if (isBoardFull()) {
				printBoard();
				System.out.println("It's a draw!");
				break;
			}
		}

		scanner.close();
	}

	public static void main(String[] args) {
		TicTacToe game = new TicTacToe();
		game.play();
	}
}
